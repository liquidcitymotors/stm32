#include "scanner.h"

void scanner_mainRisingEdgeCallback(scanner_signal_set * signals) {

	if (signals->parameters->syncMode) {
		signals->inputs->trigInput = 0;
	} else {
		scanner_reverseSignal *= -1;
	}

}

void scanner_mainFallingEdgeCallback(scanner_signal_set * signals) {

}

void scanner_auxRisingEdgeCallback(scanner_signal_set * signals) {
	signals->inputs->auxTrigInput = 1;
}
void scanner_auxFallingEdgeCallback(scanner_signal_set * signals) {
	signals->inputs->auxTrigInput = 0;
}

void scanner_buttonPressedCallback(scanner_signal_set * signals) {
	;
}
void scanner_buttonReleasedCallback(scanner_signal_set * signals) {
	;
}

void scanner_ioProcessCallback(scanner_signal_set * signals) {

	static int readIndex;

	via_setLogicOut(signals->outputs, readIndex, runtimeDisplay);
	signals->inputs->trigSamples[readIndex] = signals->inputs->trigInput;
	signals->inputs->trigInput = 1;
	scanner_reverseBuffer[readIndex] = scanner_reverseSignal;
	signals->inputs->auxTrigSamples[readIndex] = signals->inputs->auxTrigInput;

	readIndex++;

	readIndex &= SCANNER_BUFFER_SIZE*2 - 1;

}

void scanner_halfTransferCallback(scanner_signal_set * signals) {

	audioRateOutputs * outputs = signals->outputs;
	threeAxisScannerParameters * parameters = signals->parameters;


	signals->parameters->hardSync = signals->inputs->trigSamples;
	signals->parameters->reverse = scanner_reverseBuffer;


	threeAxisScannerFillBuffer(signals->inputs, signals->controls, parameters,
			&scanner_wavetableXRead, &scanner_wavetableYRead,
			0, SCANNER_BUFFER_SIZE);

	for (int i = 0; i < SCANNER_BUFFER_SIZE; i++) {
		outputs->dac2Samples[i] = parameters->altitude[i];
		outputs->dac1Samples[i] = 4095 - parameters->altitude[i];
		outputs->dac3Samples[i] = fix16_mul(parameters->xIndexBuffer[i],
				parameters->yIndexBuffer[i]) >> 4;
		outputs->logicA[i] = GET_ALOGIC_MASK(parameters->xDeltaBuffer[i]) |
				(parameters->yDeltaBuffer[i]);
		outputs->auxLogic[i] = GET_EXPAND_LOGIC_MASK(parameters->xDeltaBuffer[i] &
				parameters->yDeltaBuffer[i]);
		outputs->shA[i] = GET_SH_A_MASK(
				signals->inputs->auxTrigSamples[i]);
		outputs->shB[i] = GET_SH_B_MASK(
				signals->inputs->auxTrigSamples[i]);
	}

}

void scanner_transferCompleteCallback(scanner_signal_set * signals) {

	audioRateOutputs * outputs = signals->outputs;
	threeAxisScannerParameters * parameters = signals->parameters;

	signals->parameters->hardSync = signals->inputs->trigSamples + SCANNER_BUFFER_SIZE;
	signals->parameters->reverse = scanner_reverseBuffer + SCANNER_BUFFER_SIZE;


	threeAxisScannerFillBuffer(signals->inputs, signals->controls, parameters,
			&scanner_wavetableXRead, &scanner_wavetableYRead,
			SCANNER_BUFFER_SIZE, SCANNER_BUFFER_SIZE);


	for (int i = 0; i < SCANNER_BUFFER_SIZE; i++) {
		outputs->dac2Samples[i + SCANNER_BUFFER_SIZE] = parameters->altitude[i];
		outputs->dac1Samples[i + SCANNER_BUFFER_SIZE] = 4095 - parameters->altitude[i];
		outputs->dac3Samples[i + SCANNER_BUFFER_SIZE] = fix16_mul(parameters->xIndexBuffer[i],
				parameters->yIndexBuffer[i]) >> 4;
		outputs->logicA[i + SCANNER_BUFFER_SIZE] = GET_ALOGIC_MASK(parameters->xDeltaBuffer[i] |
				parameters->yDeltaBuffer[i]);
		outputs->auxLogic[i + SCANNER_BUFFER_SIZE] = GET_EXPAND_LOGIC_MASK(parameters->xDeltaBuffer[i] &
				parameters->yDeltaBuffer[i]);
		outputs->shA[i + SCANNER_BUFFER_SIZE] = GET_SH_A_MASK(signals->inputs->auxTrigSamples[i + SCANNER_BUFFER_SIZE]);
		outputs->shB[i + SCANNER_BUFFER_SIZE] = GET_SH_B_MASK(signals->inputs->auxTrigSamples[i + SCANNER_BUFFER_SIZE]);
	}



}

void scanner_slowConversionCallback(scanner_signal_set * signals) {

	via_updateControlRateInputs(signals->controls);
	threeAxisScannerParseControls(signals->controls, signals->parameters);

	uint32_t redLevel = abs(signals->parameters->xInput[0] - 32767) >> 3;
	uint32_t greenLevel = abs(signals->parameters->yInput[0] - 32767) >> 3;
	uint32_t blueLevel = signals->parameters->zIndex >> 6;

	updateRGBDisplay(redLevel, greenLevel, blueLevel);

}

