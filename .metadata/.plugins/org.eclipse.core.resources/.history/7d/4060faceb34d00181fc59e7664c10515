#include "stm32f3xx_hal.h"
#include "stm32f3xx.h"
#include "stm32f3xx_it.h"
#include "hardware_io.h"

uint32_t dacALevel;
uint32_t dacBLevel;

enum {
	DAC_GATE_HIGH,
	DAC_GATE_LOW,
	DAC_EXECUTE,
};

void dacAHigh(int event) {
	switch (event) {
		case DAC_EXECUTE:
			((*(volatile uint32_t *) DAC1_ADDR) = 4095);
			break;
		case DAC_GATE_LOW:
			dacALevel = 4095;
			manageADac = dacAFall;
			break;
		default:
			break;
	}
}
void dacALow(int event){
	switch (event) {
		case DAC_EXECUTE:
			((*(volatile uint32_t *) DAC1_ADDR) = 4095);
			break;
		case DAC_GATE_HIGH:
			dacALevel = 0;
			manageADac = dacARise;
			break;
		default:
			break;
}

void dacBHigh(int event) {
	switch (event) {
		case DAC_EXECUTE:
			((*(volatile uint32_t *) DAC2_ADDR) = 4095);
			break;
		case DAC_GATE_LOW:
			dacBLevel = 4095;
			manageBDac = dacBFall;
			break;
		default:
			break;
	}
}
void dacBLow(int event){
	switch (event) {
		case DAC_EXECUTE:
			((*(volatile uint32_t *) DAC2_ADDR) = 4095);
			break;
		case DAC_GATE_HIGH:
			dacBLevel = 0;
			manageBDac = dacBRise;
			break;
		default:
			break;
}

void dacARise(int event){
	switch (event) {
		case DAC_EXECUTE:
			dacALevel = dacALevel++;
			if (dacALevel >= 4095) {
				dacALevel = 4095;
				manageADac = dacAHigh;
			}
			((*(volatile uint32_t *) DAC1_ADDR) = dacALevel);
			break;
		case DAC_GATE_LOW:
			manageADac = dacAFall();
			break;
		default:
			break;
	}
}
void dacAFall(int event){
	switch (event) {
		case DAC_EXECUTE:
			dacALevel = dacALevel--;
			if (dacALevel <= 0) {
				dacALevel = 0;
				manageADac = dacALow;
			}
			((*(volatile uint32_t *) DAC1_ADDR) = dacALevel);
			break;
		case DAC_GATE_HIGH:
			manageADac = dacARise();
	}
}


void dacBRise(int event){
	switch (event) {
		case DAC_EXECUTE:
			dacBLevel = dacBLevel++;
			if (dacBLevel >= 4095) {
				dacBLevel = 4095;
				manageADac = dacBHigh;
			}
			((*(volatile uint32_t *) DAC2_ADDR) = dacBLevel);
			break;
		case DAC_GATE_LOW:
			manageBDac = dacBFall();
			break;
		default:
			break;
	}
}
void dacBFall(int event){
	switch (event) {
		case DAC_EXECUTE:
			dacBLevel = dacBLevel--;
			if (dacBLevel <= 0) {
				dacBLevel = 0;
				manageADac = dacBLow;
			}
			((*(volatile uint32_t *) DAC2_ADDR) = dacBLevel);
			break;
		case DAC_GATE_HIGH:
			manageBDac = dacBRise();
	}
}
