/**
 ******************************************************************************
 * File Name          : tsl_user.c.c
 * Description        : User configuration file for TOUCHSENSING
 *                      middleWare.
 ******************************************************************************
 * This notice applies to any and all portions of this file
 * that are not between comment pairs USER CODE BEGIN and
 * USER CODE END. Other portions of this file, whether 
 * inserted by the user or by software development tools
 * are owned by their respective copyright owners.
 *
 * Copyright (c) 2018 STMicroelectronics International N.V. 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted, provided that the following conditions are met:
 *
 * 1. Redistribution of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of STMicroelectronics nor the names of other 
 *    contributors to this software may be used to endorse or promote products 
 *    derived from this software without specific written permission.
 * 4. This software, including modifications and/or derivative works of this 
 *    software, must execute solely and exclusively on microcontroller or
 *    microprocessor devices manufactured by or for STMicroelectronics.
 * 5. Redistribution and use of this software other than as permitted under 
 *    this license is void and will automatically terminate your rights under 
 *    this license. 
 *
 * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
 * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
 * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */

#include "tsl_user.h"

/* Private functions prototype -----------------------------------------------*/

/* Global variables ----------------------------------------------------------*/
/* USER CODE BEGIN Global variables */

/* USER CODE END Global variables */

__IO TSL_tTick_ms_T ECSLastTick; /* Hold the last time value for ECS */

/**
 * @brief  Initialize the STMTouch Driver
 * @param  None
 * @retval None
 */
void tsl_user_Init(void) {
	TSL_obj_GroupInit(&MyObjGroup); /* Init Objects */

	TSL_Init(MyBanks); /* Init acquisition module */

	tsl_user_SetThresholds(); /* Init thresholds for each object individually (optional) */
}

/**
 * @brief  Execute STMTouch Driver main State machine
 * @param  None
 * @retval status Return TSL_STATUS_OK if the acquisition is done
 */
tsl_user_status_t tsl_user_Exec(void) {
	static uint32_t idx_bank = 0;
	static uint32_t config_done = 0;
	tsl_user_status_t status = TSL_USER_STATUS_BUSY;

	/* Configure and start bank acquisition */
	if (!config_done) {
		/* USER CODE BEGIN not config_done start*/

		/* USER CODE END not config_done start*/
		TSL_acq_BankConfig(idx_bank);
		TSL_acq_BankStartAcq();
		config_done = 1;
		/* USER CODE BEGIN not config_done */

		/* USER CODE END not config_done */
	}

	/* Check end of acquisition (polling mode) and read result */
	if (TSL_acq_BankWaitEOC() == TSL_STATUS_OK) {
		/* USER CODE BEGIN end of acquisition start*/

		/* USER CODE END end of acquisition start*/
		STMSTUDIO_LOCK;
		TSL_acq_BankGetResult(idx_bank, 0, 0);
		STMSTUDIO_UNLOCK;
		idx_bank++; /* Next bank */
		config_done = 0;
		/* USER CODE BEGIN end of acquisition */

		/* USER CODE END end of acquisition */
	}

	/* Process objects, DxS and ECS
	 Check if all banks have been acquired
	 */
	if (idx_bank > TSLPRM_TOTAL_BANKS - 1) {
		/* USER CODE BEGIN before reset*/

		/* USER CODE END before reset*/
		/* Reset flags for next banks acquisition */
		idx_bank = 0;
		config_done = 0;

		/* Process Objects */
		TSL_obj_GroupProcess(&MyObjGroup);

		/* DxS processing (if TSLPRM_USE_DXS option is set) */
		TSL_dxs_FirstObj(&MyObjGroup);

		/* ECS every 100ms */
		if (TSL_tim_CheckDelay_ms(100, &ECSLastTick) == TSL_STATUS_OK) {
			if (TSL_ecs_Process(&MyObjGroup) == TSL_STATUS_OK) {
				status = TSL_USER_STATUS_OK_ECS_ON;
			} else {
				status = TSL_USER_STATUS_OK_ECS_OFF;
			}
		} else {
			status = TSL_USER_STATUS_OK_NO_ECS;
		}
		/* USER CODE BEGIN Process objects */

		/* USER CODE END Process objects */
	} else {
		status = TSL_USER_STATUS_BUSY;
		/* USER CODE BEGIN TSL_USER_STATUS_BUSY */

		/* USER CODE END TSL_USER_STATUS_BUSY */
	}

	return status;
}

/**
 * @brief  Set thresholds for each object (optional).
 * @param  None
 * @retval None
 */
void tsl_user_SetThresholds(void) {
	/* USER CODE BEGIN Tsl_user_SetThresholds */
	/* Example: Decrease the Detect thresholds for the TKEY 0
	 MyTKeys_Param[0].DetectInTh -= 10;
	 MyTKeys_Param[0].DetectOutTh -= 10;
	 */
	/* USER CODE END Tsl_user_SetThresholds */
}

/**
 * @brief  Executed when a sensor is in Error state
 * @param  None
 * @retval None
 */
void MyTKeys_ErrorStateProcess(void) {
	/* Add here your own processing when a sensor is in Error state */
}

/**
 * @brief  Executed when a sensor is in Off state
 * @param  None
 * @retval None
 */
void MyTKeys_OffStateProcess(void) {
	/* Add here your own processing when a sensor is in Off state */
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
