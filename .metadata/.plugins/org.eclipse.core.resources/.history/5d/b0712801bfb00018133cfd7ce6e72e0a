/*
 ******************************************************************************
 * File Name          : tsl_user.h.h
 * Description        : Touch-Sensing user configuration.
 ******************************************************************************
 * This notice applies to any and all portions of this file
 * that are not between comment pairs USER CODE BEGIN and
 * USER CODE END. Other portions of this file, whether 
 * inserted by the user or by software development tools
 * are owned by their respective copyright owners.
 *
 * Copyright (c) 2018 STMicroelectronics International N.V. 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted, provided that the following conditions are met:
 *
 * 1. Redistribution of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of STMicroelectronics nor the names of other 
 *    contributors to this software may be used to endorse or promote products 
 *    derived from this software without specific written permission.
 * 4. This software, including modifications and/or derivative works of this 
 *    software, must execute solely and exclusively on microcontroller or
 *    microprocessor devices manufactured by or for STMicroelectronics.
 * 5. Redistribution and use of this software other than as permitted under 
 *    this license is void and will automatically terminate your rights under 
 *    this license. 
 *
 * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
 * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
 * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __TSL_USER_H
#define __TSL_USER_H

#include "tsl.h"
#include "stm32f3xx_hal.h"

/* Select if you use STMStudio software (0=No, 1=Yes) */
#define USE_STMSTUDIO (0)

#if USE_STMSTUDIO > 0
#include "stmCriticalSection.h"
#define STMSTUDIO_LOCK {enterLock();}
#define STMSTUDIO_UNLOCK {exitLock();}
#else
#define STMSTUDIO_LOCK
#define STMSTUDIO_UNLOCK
#endif

typedef enum {
	TSL_USER_STATUS_BUSY = 0, /**< The bank acquisition is on-going */
	TSL_USER_STATUS_OK_NO_ECS = 1, /**< The bank acquisition is ok, no time for ECS */
	TSL_USER_STATUS_OK_ECS_ON = 2, /**< The bank acquisition is ok, ECS finished */
	TSL_USER_STATUS_OK_ECS_OFF = 3 /**< The bank acquisition is ok, ECS not executed */
} tsl_user_status_t;

/* Channel IOs definition */
#define CHANNEL_0_IO_MSK    (TSC_GROUP5_IO4)
#define CHANNEL_0_GRP_MSK   (TSC_GROUP5)
#define CHANNEL_0_SRC       (TSC_GROUP5_IDX) /* Index in source register (TSC->IOGXCR[]) */
#define CHANNEL_0_DEST      (0) /* Index in destination result array */

#define CHANNEL_1_IO_MSK    (TSC_GROUP5_IO3)
#define CHANNEL_1_GRP_MSK   (TSC_GROUP5)
#define CHANNEL_1_SRC       (TSC_GROUP5_IDX) 
#define CHANNEL_1_DEST      (1) 

#define CHANNEL_2_IO_MSK    (TSC_GROUP5_IO1)
#define CHANNEL_2_GRP_MSK   (TSC_GROUP5)
#define CHANNEL_2_SRC       (TSC_GROUP5_IDX) 
#define CHANNEL_2_DEST      (2) 

#define CHANNEL_3_IO_MSK    (TSC_GROUP4_IO2)
#define CHANNEL_3_GRP_MSK   (TSC_GROUP4)
#define CHANNEL_3_SRC       (TSC_GROUP4_IDX) 
#define CHANNEL_3_DEST      (3) 

#define CHANNEL_4_IO_MSK    (TSC_GROUP6_IO3)
#define CHANNEL_4_GRP_MSK   (TSC_GROUP6)
#define CHANNEL_4_SRC       (TSC_GROUP6_IDX) 
#define CHANNEL_4_DEST      (4) 

#define CHANNEL_5_IO_MSK    (TSC_GROUP6_IO2)
#define CHANNEL_5_GRP_MSK   (TSC_GROUP6)
#define CHANNEL_5_SRC       (TSC_GROUP6_IDX) 
#define CHANNEL_5_DEST      (5) 

/* Shield IOs definition */
#define SHIELD_IO_MSK      (0)

/* Bank(s) definition */
/* TOUCHKEYS bank(s) definition*/
#define BANK_0_NBCHANNELS (1)
#define BANK_0_MSK_CHANNELS   (CHANNEL_0_IO_MSK)
#define BANK_0_MSK_GROUPS     (CHANNEL_0_GRP_MSK)

#define BANK_1_NBCHANNELS (1)
#define BANK_1_MSK_CHANNELS   (CHANNEL_1_IO_MSK)
#define BANK_1_MSK_GROUPS     (CHANNEL_1_GRP_MSK)

#define BANK_2_NBCHANNELS (3)
#define BANK_2_MSK_CHANNELS   (CHANNEL_2_IO_MSK | CHANNEL_3_IO_MSK | CHANNEL_4_IO_MSK)
#define BANK_2_MSK_GROUPS     (CHANNEL_2_GRP_MSK | CHANNEL_3_GRP_MSK | CHANNEL_4_GRP_MSK)

#define BANK_3_NBCHANNELS (1)
#define BANK_3_MSK_CHANNELS   (CHANNEL_5_IO_MSK)
#define BANK_3_MSK_GROUPS     (CHANNEL_5_GRP_MSK)

/* User Parameters */
extern CONST TSL_Bank_T MyBanks[];
extern CONST TSL_TouchKey_T MyTKeys[];
extern CONST TSL_Object_T MyObjects[];
extern TSL_ObjectGroup_T MyObjGroup;

void tsl_user_Init(void);
tsl_user_status_t tsl_user_Exec(void);
void tsl_user_SetThresholds(void);


/*============================================================================*/
/* Channels                                                                   */
/*============================================================================*/

/* Source and Configuration (ROM) */
CONST TSL_ChannelSrc_T MyChannels_Src[TSLPRM_TOTAL_CHANNELS] = { {
		CHANNEL_0_SRC, CHANNEL_0_IO_MSK, CHANNEL_0_GRP_MSK }, { CHANNEL_1_SRC,
		CHANNEL_1_IO_MSK, CHANNEL_1_GRP_MSK }, { CHANNEL_2_SRC,
		CHANNEL_2_IO_MSK, CHANNEL_2_GRP_MSK }, { CHANNEL_3_SRC,
		CHANNEL_3_IO_MSK, CHANNEL_3_GRP_MSK }, { CHANNEL_4_SRC,
		CHANNEL_4_IO_MSK, CHANNEL_4_GRP_MSK }, { CHANNEL_5_SRC,
		CHANNEL_5_IO_MSK, CHANNEL_5_GRP_MSK }, };

/* Destination (ROM) */
CONST TSL_ChannelDest_T MyChannels_Dest[TSLPRM_TOTAL_CHANNELS] = { {
		CHANNEL_0_DEST }, { CHANNEL_1_DEST }, { CHANNEL_2_DEST }, {
		CHANNEL_3_DEST }, { CHANNEL_4_DEST }, { CHANNEL_5_DEST }, };

/* Data (RAM) */
TSL_ChannelData_T MyChannels_Data[TSLPRM_TOTAL_CHANNELS];

/*============================================================================*/
/* Banks                                                                      */
/*============================================================================*/

/* List (ROM) */
CONST TSL_Bank_T MyBanks[TSLPRM_TOTAL_BANKS] = {
/* TOUCHKEYS bank(s) definition*/
{ &MyChannels_Src[0], &MyChannels_Dest[0], MyChannels_Data, BANK_0_NBCHANNELS,
		BANK_0_MSK_CHANNELS, BANK_0_MSK_GROUPS }, { &MyChannels_Src[1],
		&MyChannels_Dest[1], MyChannels_Data, BANK_1_NBCHANNELS,
		BANK_1_MSK_CHANNELS, BANK_1_MSK_GROUPS }, { &MyChannels_Src[2],
		&MyChannels_Dest[2], MyChannels_Data, BANK_2_NBCHANNELS,
		BANK_2_MSK_CHANNELS, BANK_2_MSK_GROUPS }, { &MyChannels_Src[5],
		&MyChannels_Dest[5], MyChannels_Data, BANK_3_NBCHANNELS,
		BANK_3_MSK_CHANNELS, BANK_3_MSK_GROUPS }, };
/*============================================================================*/
/* Touchkey sensors                                                           */
/*============================================================================*/

/* Data (RAM) */
TSL_TouchKeyData_T MyTKeys_Data[TSLPRM_TOTAL_TKEYS];

/* Parameters (RAM) */
TSL_TouchKeyParam_T MyTKeys_Param[TSLPRM_TOTAL_TKEYS];

/* State Machine (ROM) */

void MyTKeys_ErrorStateProcess(void);
void MyTKeys_OffStateProcess(void);

CONST TSL_State_T MyTKeys_StateMachine[] =
		{
		/* Calibration states */
		/*  0 */{ TSL_STATEMASK_CALIB, TSL_tkey_CalibrationStateProcess },
				/*  1 */{ TSL_STATEMASK_DEB_CALIB,
						TSL_tkey_DebCalibrationStateProcess },
				/* Release states */
				/*  2 */{ TSL_STATEMASK_RELEASE, TSL_tkey_ReleaseStateProcess },
#if TSLPRM_USE_PROX > 0
				/*  3 */{TSL_STATEMASK_DEB_RELEASE_PROX, TSL_tkey_DebReleaseProxStateProcess},
#else
				/*  3 */{ TSL_STATEMASK_DEB_RELEASE_PROX, 0 },
#endif
				/*  4 */{ TSL_STATEMASK_DEB_RELEASE_DETECT,
						TSL_tkey_DebReleaseDetectStateProcess },
				/*  5 */{ TSL_STATEMASK_DEB_RELEASE_TOUCH,
						TSL_tkey_DebReleaseTouchStateProcess },
#if TSLPRM_USE_PROX > 0
				/* Proximity states */
				/*  6 */{TSL_STATEMASK_PROX, TSL_tkey_ProxStateProcess},
				/*  7 */{TSL_STATEMASK_DEB_PROX, TSL_tkey_DebProxStateProcess},
				/*  8 */{TSL_STATEMASK_DEB_PROX_DETECT, TSL_tkey_DebProxDetectStateProcess},
				/*  9 */{TSL_STATEMASK_DEB_PROX_TOUCH, TSL_tkey_DebProxTouchStateProcess},
#else
				/*  6 */{ TSL_STATEMASK_PROX, 0 },
				/*  7 */{ TSL_STATEMASK_DEB_PROX, 0 },
				/*  8 */{ TSL_STATEMASK_DEB_PROX_DETECT, 0 },
				/*  9 */{ TSL_STATEMASK_DEB_PROX_TOUCH, 0 },
#endif
				/* Detect states */
				/* 10 */{ TSL_STATEMASK_DETECT, TSL_tkey_DetectStateProcess },
				/* 11 */{ TSL_STATEMASK_DEB_DETECT,
						TSL_tkey_DebDetectStateProcess },
				/* Touch state */
				/* 12 */{ TSL_STATEMASK_TOUCH, TSL_tkey_TouchStateProcess },
				/* Error states */
				/* 13 */{ TSL_STATEMASK_ERROR, MyTKeys_ErrorStateProcess },
				/* 14 */{ TSL_STATEMASK_DEB_ERROR_CALIB,
						TSL_tkey_DebErrorStateProcess },
				/* 15 */{ TSL_STATEMASK_DEB_ERROR_RELEASE,
						TSL_tkey_DebErrorStateProcess },
				/* 16 */{ TSL_STATEMASK_DEB_ERROR_PROX,
						TSL_tkey_DebErrorStateProcess },
				/* 17 */{ TSL_STATEMASK_DEB_ERROR_DETECT,
						TSL_tkey_DebErrorStateProcess },
				/* 18 */{ TSL_STATEMASK_DEB_ERROR_TOUCH,
						TSL_tkey_DebErrorStateProcess },
				/* Other states */
				/* 19 */{ TSL_STATEMASK_OFF, MyTKeys_OffStateProcess } };

/* Methods for "extended" type (ROM) */
CONST TSL_TouchKeyMethods_T MyTKeys_Methods =
		{ TSL_tkey_Init, TSL_tkey_Process };

/* TouchKeys list (ROM) */

CONST TSL_TouchKey_T MyTKeys[TSLPRM_TOTAL_TOUCHKEYS] = { { &MyTKeys_Data[0],
		&MyTKeys_Param[0], &MyChannels_Data[CHANNEL_0_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods }, { &MyTKeys_Data[1],
		&MyTKeys_Param[1], &MyChannels_Data[CHANNEL_1_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods }, { &MyTKeys_Data[2],
		&MyTKeys_Param[2], &MyChannels_Data[CHANNEL_2_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods }, { &MyTKeys_Data[3],
		&MyTKeys_Param[3], &MyChannels_Data[CHANNEL_3_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods }, { &MyTKeys_Data[4],
		&MyTKeys_Param[4], &MyChannels_Data[CHANNEL_4_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods }, { &MyTKeys_Data[5],
		&MyTKeys_Param[5], &MyChannels_Data[CHANNEL_5_DEST],
		MyTKeys_StateMachine, &MyTKeys_Methods } };

/*============================================================================*/
/* Generic Objects                                                            */
/*============================================================================*/

/* List (ROM) */
CONST TSL_Object_T MyObjects[TSLPRM_TOTAL_OBJECTS] = { { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[0] }, { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[1] }, { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[2] }, { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[3] }, { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[4] }, { TSL_OBJ_TOUCHKEY,
		(TSL_TouchKey_T *) &MyTKeys[5] } };

/* Group (RAM) */
TSL_ObjectGroup_T MyObjGroup = { &MyObjects[0], /* First object */
TSLPRM_TOTAL_OBJECTS, /* Number of objects */
0x00, /* State mask reset value */
TSL_STATE_NOT_CHANGED /* Current state */
};

/*============================================================================*/
/* TSL Common Parameters placed in RAM or ROM                                 */
/* --> external declaration in tsl_conf.h                                     */
/*============================================================================*/

TSL_Params_T TSL_Params = {
TSLPRM_ACQ_MIN,
TSLPRM_ACQ_MAX,
TSLPRM_CALIB_SAMPLES,
TSLPRM_DTO,
#if TSLPRM_TOTAL_TKEYS > 0
		MyTKeys_StateMachine, /* Default state machine for TKeys */
		&MyTKeys_Methods, /* Default methods for TKeys */
#endif
#if TSLPRM_TOTAL_LNRTS > 0
		MyLinRots_StateMachine, /* Default state machine for LinRots */
		&MyLinRots_Methods /* Default methods for LinRots */
#endif
	};

#endif /* __TSL_USER_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
