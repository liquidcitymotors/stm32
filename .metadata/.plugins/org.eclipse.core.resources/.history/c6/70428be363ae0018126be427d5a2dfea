/*
 * meta.h
 *
 *  Created on: Aug 29, 2018
 *      Author: willmitchell
 */

#ifndef INC_META_H_
#define INC_META_H_


#include "via_platform_binding.h"
#include "user_interface.h"
#include "oscillators.h"

/*
 *
 * Signals
 *
 */

simpleWavetableParameters meta_wavetableParameters;
metaControllerParameters metaParameters;
simpleEnvelopeParameters drumParameters;

typedef struct {

	audioRateOutputs * outputs;
	audioRateInputs * inputs;
	controlRateInputs * controls;
	simpleWavetableParameters * wavetable_parameters;
	metaControllerParameters * meta_parameters;
	simpleEnvelopeParameters * drum_parameters;


} meta_signal_set;

meta_signal_set meta_signals;

#define META_BUFFER_SIZE 1

/*
 *
 * Event handlers
 *
 */

void meta_init(meta_signal_set *);

void meta_mainRisingEdgeCallback(meta_signal_set *);
void meta_mainFallingEdgeCallback(meta_signal_set *);

void meta_auxRisingEdgeCallback(meta_signal_set *);
void meta_auxFallingEdgeCallback(meta_signal_set *);

void meta_buttonPressedCallback(meta_signal_set *);
void meta_buttonPressedCallback(meta_signal_set *);

void meta_ioProcessCallback(meta_signal_set *);
void meta_halfTransferCallback(meta_signal_set *);
void meta_transferCompleteCallback(meta_signal_set *);
void meta_slowConversionCallback(meta_signal_set *);

/*
 *
 * Modes
 *
 */

// Mode enums and mode variables

#define SH_MODE button1Mode
#define TABLE button2Mode
#define TRIG_MODE button4Mode
#define FREQ_MODE button3Mode
#define LOOP_MODE button6Mode
#define LOGIC_A_MODE aux2Mode
#define DRUM_MODE aux3Mode
#define DAC_3_MODE aux4Mode


#define numButton1Modes 6
#define numButton2Modes 8
#define numButton3Modes 3
#define numButton4Modes 5
#define numButton5Modes 8
#define numButton6Modes 2
#define numAux1Modes 0
#define numAux2Modes 2
#define numAux3Modes 6
#define numAux4Modes 2

enum meta_button1Modes {nosampleandhold, a, b, ab, halfdecimate, meta_decimate};
enum meta_button2Modes {tables};
enum meta_button3Modes {audio, env, seq};
enum meta_button4Modes {noretrigger, meta_hardsync, nongatedretrigger, gated, meta_pendulum};
enum meta_button5Modes {pairedWithButton2};
enum meta_button6Modes {noloop, looping};
enum meta_aux1Modes {aux1NotUsed};
enum meta_aux2Modes {releaseGate, attackGate};
enum meta_aux3Modes {pitchMorphAmp, morphAmp, amp, morph, pitch, pitchMorph};
enum meta_aux4Modes {phasor, contour};


/*
 *
 * UI implementation
 *
 */

void meta_handleButton1ModeChange(int);
void meta_handleButton2ModeChange(int);
void meta_handleButton3ModeChange(int);
void meta_handleButton4ModeChange(int);
void meta_handleButton5ModeChange(int);
void meta_handleButton6ModeChange(int);
void meta_handleAux1ModeChange(int);
void meta_handleAux2ModeChange(int);
void meta_handleAux3ModeChange(int);
void meta_handleAux4ModeChange(int);

void meta_handleButton1Tap(void);
void meta_handleButton2Tap(void);
void meta_handleButton3Tap(void);
void meta_handleButton4Tap(void);
void meta_handleButton5Tap(void);
void meta_handleButton6Tap(void);
void meta_handleAux1Tap(void);
void meta_handleAux2Tap(void);
void meta_handleAux3Tap(void);
void meta_handleAux4Tap(void);

void meta_handleButton1EnterMenu(void);
void meta_handleButton2EnterMenu(void);
void meta_handleButton3EnterMenu(void);
void meta_handleButton4EnterMenu(void);
void meta_handleButton5EnterMenu(void);
void meta_handleButton6EnterMenu(void);
void meta_handleAux1EnterMenu(void);
void meta_handleAux2EnterMenu(void);
void meta_handleAux3EnterMenu(void);
void meta_handleAux4EnterMenu(void);

void meta_handleButton1Tap(void);
void meta_handleButton2Tap(void);
void meta_handleButton3Tap(void);
void meta_handleButton4Tap(void);
void meta_handleButton5Tap(void);
void meta_handleButton6Tap(void);
void meta_handleAux1Tap(void);
void meta_handleAux2Tap(void);
void meta_handleAux3Tap(void);
void meta_handleAux4Tap(void);

void meta_handleButton1Hold(void);
void meta_handleButton2Hold(void);
void meta_handleButton3Hold(void);
void meta_handleButton4Hold(void);
void meta_handleButton5Hold(void);
void meta_handleButton6Hold(void);
void meta_handleAux1Hold(void);
void meta_handleAux2Hold(void);
void meta_handleAux3Hold(void);
void meta_handleAux4Hold(void);

void meta_initializeUICallbacks(void);

/*
 *
 * Tables
 *
 */

// declare an array of pointers to wavetables (stored in flash)
Wavetable * meta_wavetableArray[3][8];

// declare arrays to store the active tables
uint32_t meta_wavetableRead[9][517];
uint32_t meta_wavetableReadDrum[517];

//uint32_t meta_phaseDistRead[33][65];

// declare functions to set the currently active tables
void meta_switchWavetable(Wavetable *, meta_signal_set * signals);
// phase distortion table is fixed
void meta_initPhaseDistTable(void);
void meta_fillWavetableArray(void);
void meta_initDrum(void);


/*
 *
 * Mode functions
 *
 */

void (*meta_drumMode)(meta_signal_set * signals, int writeIndex);

void meta_drumModeOff(meta_signal_set * signals, int writeIndex);
void meta_drumModeOn(meta_signal_set * signals, int writeIndex);

uint16_t metaVirtualFM[2];
uint16_t metaVirtualMorph[2];

void (*meta_calculateDac3)(meta_signal_set * signals, int writeIndex);

void meta_calculateDac3Phasor(meta_signal_set * signals, int writeIndex);
void meta_calculateDac3Contour(meta_signal_set * signals, int writeIndex);

void (*meta_calculateLogicA)(meta_signal_set * signals, int writeIndex);

void meta_calculateLogicAReleaseGate(meta_signal_set* signals, int writeIndex);
void meta_calculateLogicAAttackGate(meta_signal_set * signals, int writeIndex);

void (*meta_calculateSH)(meta_signal_set * signals, int writeIndex);
// No S&H
void meta_calculateSHMode1(meta_signal_set * signals, int writeIndex);
// Sample A from A to B
void meta_calculateSHMode2(meta_signal_set * signals, int writeIndex);
// Resample B at A
void meta_calculateSHMode3(meta_signal_set * signals, int writeIndex);
// Sample A from A to B and resample B at A
void meta_calculateSHMode4(meta_signal_set * signals, int writeIndex);
// Half Decimate (Sample A from A to B sample B from B to A
void meta_calculateSHMode5(meta_signal_set * signals, int writeIndex);
// Decimate (Resample A at B, resample B at A
void meta_calculateSHMode6(meta_signal_set * signals, int writeIndex);


#endif /* INC_META_H_ */
