#include "tables.h"
#include "main.h"
#include "stm32f3xx_hal.h"
#include "stm32f3xx.h"
#include "stm32f3xx_it.h"
#include "modes.h"

const Slope moogSquare = {
	.attackFamily = moogSquareShiftAttackFamily,
	.releaseFamily = moogSquareShiftReleaseFamily,
	.tableLength = 64,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope triOdd = {
	.attackFamily = trioddAttackFamily,
	.releaseFamily = trioddReleaseFamily,
	.tableLength = 64,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope sawBend = {
	.attackFamily = sawBendAttackFamily,
	.releaseFamily = sawBendReleaseFamily,
	.tableLength = 4,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope sawBendLinAtk = {
	.attackFamily = allLinear5_5,
	.releaseFamily = sawBendReleaseFamily,
	.tableLength = 4,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope exciteBike = {
	.attackFamily = exciteBikeAttackFamily,
	.releaseFamily = exciteBikeReleaseFamily,
	.tableLength = 8,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope algerian = {
	.attackFamily = algerianAttackFamily,
	.releaseFamily = algerianReleaseFamily,
	.tableLength = 64,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope superEllipse1Sym = {
	.attackFamily = superEllipse1SymAttackFamily,
	.releaseFamily = superEllipse1SymReleaseFamily,
	.tableLength = 64,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope superEllipse1Asym = {
	.attackFamily = superEllipse1AsymAttackFamily,
	.releaseFamily = superEllipse1AsymReleaseFamily,
	.tableLength = 64,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope steps = {
	.attackFamily = stepsAttackFamily,
	.releaseFamily = stepsReleaseFamily,
	.tableLength = 64,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope impevens = {
	.attackFamily = impshort,
	.releaseFamily = impshort,
	.tableLength = 128,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope skipSaw = {
	.attackFamily = skipsaw,
	.releaseFamily = skipsaw,
	.tableLength = 64,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope lump2ndDegLinAtk = {
	.attackFamily = allLinear129_5,
	.releaseFamily = lump2ndDeg,
	.tableLength = 128,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope doubleLump2ndDegLinAtk = {
	.attackFamily = allLinear129_5,
	.releaseFamily = lump2ndDeg,
	.tableLength = 128,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope threeBounceLinAtk = {
	.attackFamily = allLinear65_3,
	.releaseFamily = threeBounce,
	.tableLength = 64,
	.familySize = 3,
	.bandlimitOff = 0};


const Slope sawPWM = {
	.attackFamily = sawPWMAttackFamily,
	.releaseFamily = sawPWMReleaseFamily,
	.tableLength = 256,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope tenor257 = {
	.attackFamily = tenor257Atk,
	.releaseFamily = tenor257Rls,
	.tableLength = 256,
	.familySize = 5,
	.bandlimitOff = 1};


const Slope linwavefold_257 = {
	.attackFamily = linwavefold_257_Family,
	.releaseFamily = linwavefold_257_Family,
	.tableLength = 256,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope sinwavefold_257 = {
	.attackFamily = sinwavefold_257_Family,
	.releaseFamily = sinwavefold_257_Family,
	.tableLength = 256,
	.familySize = 9,
	.bandlimitOff = 0};


const Slope additive_tri_to_pulse = {
	.attackFamily = additive_tri_to_pulseFamily,
	.releaseFamily = additive_tri_to_pulseFamily,
	.tableLength = 256,
	.familySize = 5,
	.bandlimitOff = 0};


const Slope newBounce = {
	.attackFamily = newBounceFamily,
	.releaseFamily = newBounceFamily,
	.tableLength = 256,
	.familySize = 5,
	.bandlimitOff = 0};




void fillFamilyArray(void) {

	attackBanks[0][0] = &sinwavefold_257;
	attackBanks[0][0] = &linwavefold_257;
	attackBanks[0][0] = &skipSaw;
	attackBanks[0][0] = &additive_tri_to_pulse;
	attackBanks[0][0] = &newBounce;
	attackBanks[0][0] = &sinwavefold_257;
	attackBanks[0][0] = &additive_tri_to_pulse;
	attackBanks[0][0] = &linwavefold_257;

	currentFamily = *familyArray[0];
	switchFamily();

}

// this sets the flags to be used in the interrupt and also fills the holding array on the heap
void switchAttack(int shapeMode, int trigMode) {

	loadAttackArray(attackBanks[trigMode][shapeMode]);

}

void switchRelease(int shapeMode, int trigMode) {

	loadReleaseArray(attackBanks[trigMode][shapeMode]);


}

// this shuttles the data from flash to ram and fills our holding array
void loadSampleArray(Slope family) {

	uint32_t numSamples = family.tableLength;

	//for each table in the family
	for (int i = 0; i < 5; i++) {
		//include the "last two" samples from release
		fullTableHoldArray[i][0] = *(*(family.releaseFamily + i) + 0);
		fullTableHoldArray[i][1] = *(*(family.releaseFamily + i) + 0);
		//fill in a full cycle's worth of samples
		//the release gets reversed
		//we drop the last sample from attack and the first from releas
		for (int j = 0;j < numSamples; j++) {
			fullTableHoldArray[i][2 + j] = *(*(family.attackFamily + i) + j);
			fullTableHoldArray[i][2 + numSamples + j] = *(*(family.releaseFamily + i) + family.tableLength - j);
		}
		//pad out the "first two" samples from attack
		fullTableHoldArray[i][(numSamples << 1) + 2] = *(*(family.attackFamily + i) + 0);
		fullTableHoldArray[i][(numSamples << 1) + 3] = *(*(family.attackFamily + i) + 0);
		fullTableHoldArray[i][(numSamples << 1) + 4] = *(*(family.attackFamily + i) + 0);
	}

}

