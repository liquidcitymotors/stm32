/*
 * oversampled_wavetable.c
 *
 *  Created on: Aug 19, 2018
 *      Author: willmitchell
 */

#include "oscillators.h"
#include "dsp.h"

void oversampledWavetableParseControls(controlRateInputs * controls,
		oversampledWavetableParameters * parameters) {

	parameters->frequencyBase = fix16_mul(expoTable[controls->cv1Value] >> 3,
			fix16_mul(expoTable[(controls->knob1Value >> 2) * 3] >> 2,
					expoTable[(controls->knob2Value >> 4) + 1300] >> 2));
	parameters->morphBase = controls->knob3Value;
	parameters->fmAmount = controls->linTouchValue << 4;
	parameters->pmAmount = (4095 - controls->linTouchValue) << 4;

}

uint32_t oversampledWavetableAdvance(
		oversampledWavetableParameters * parameters, audioRateOutputs * outputs,
		uint32_t * wavetable, uint32_t * phaseDistTable, uint32_t writePosition,
		uint32_t bufferSize) {

	// these static variables are bad as they prevent multiple instantiations of a wavetable
	// better to pass in and out of function in struct

	static uint32_t phase;

//	int fm = parameters->fm[0];
//	fm *= -1;
//	fm = fix16_mul(fm, parameters->fmAmount);
//	fm += 16383;

	// calculate buffer rate parameters
	int increment = parameters->frequencyBase * parameters->reverseInput;

	int pwm = -parameters->pwm[0];
	pwm = fix16_mul(parameters->pmAmount, pwm);
	pwm += 32767;
	uint32_t pwmIndex = (pwm >> 11);
	uint32_t pwmFrac = (pwm & 0x7FF) << 4;
	// assuming that each phase distortion lookup table is 65 samples long stored as int
	uint32_t * pwmTable1 = phaseDistTable + pwmIndex * 65;
	uint32_t * pwmTable2 = pwmTable1 + 65;

	// combine knob and CV then to table size in 16.16 fixed point
	int morph = -parameters->morphMod[0];
	morph = fix16_mul(morph, parameters->fmAmount);
	morph = __USAT(((parameters->morphBase << 4)
							+ morph), 16)
					* parameters->tableSize;
	uint32_t morphIndex = morph >> 16;
	uint32_t morphFrac = morph & 0xFFFF;
	// assuming that each phase distortion lookup table is 517 samples long stored as int
	uint32_t * wavetable1 = wavetable + (morphIndex * 517) + 2;

	static uint32_t lastPhaseMod;
	int phaseMod = parameters->pm[0];
	phase += (phaseMod - lastPhaseMod) << 16;
	lastPhaseMod = phaseMod;

	phase *= parameters->syncInput;
	parameters->syncInput = 1;
	phase *= parameters->syncInput;
	parameters->syncInput = 1;

	uint32_t * dac1Buffer = outputs->dac1Samples;
	uint32_t * dac2Buffer = outputs->dac2Samples;
	uint32_t * dac3Buffer = outputs->dac3Samples;

	uint32_t leftSample;
	uint32_t ghostPhase = 0;

	uint32_t writeIndex = writePosition;
	uint32_t samplesRemaining = bufferSize;

	while (samplesRemaining) {
		// phase pointer wraps at 32 bits
		phase = (phase + increment);
		// treat the msb of phase as a 6.15 (tablesize.interpolationbits) fixed point number
		// divide by right shifting phase size (32 bits) less table size (6 bits) to find the nearest sample to the left
		leftSample = phase >> 26;
		// extract the less significant bits as fractional phase
#define pwmPhaseFrac (phase & 0x3FFFFFF) >> 11
		// use this with the precalculated pwm to perform bilinear interpolation
		// this accomplishes the
		ghostPhase = fix15_bilerp(pwmTable1[leftSample], pwmTable2[leftSample],
				pwmTable1[leftSample + 1], pwmTable2[leftSample + 1], pwmFrac,
				pwmPhaseFrac);
		// output of phase distortion is a 9.16 (tablesize.interpolationbits) fixed point number
		// scale to 12 bits for saw out
		dac3Buffer[writeIndex] = (ghostPhase) >> 13;
		//dac3Buffer[writeIndex] = dummyCV;
		// get the actual wavetable output sample as above
		// but with the appropriate scaling as phase is now 25 bits and table length is 9 bits
		leftSample = ghostPhase >> 16;
#define phaseFrac (ghostPhase & 0xFFFF)
		dac2Buffer[writeIndex] = fast_15_16_bilerp_prediff(
				wavetable1[leftSample], wavetable1[leftSample + 1], morphFrac,
				phaseFrac);
		dac1Buffer[writeIndex] = 4095 - dac2Buffer[writeIndex];

		writeIndex++;
		samplesRemaining--;
	}

	return ghostPhase;

}

void oversampledWavetableParsePhase(uint32_t phase,
		oversampledWavetableParameters * parameters, audioRateOutputs *output) {

	static uint32_t lastPhaseHemisphere;

	// 1 if phase is greater than half, else 0
	uint32_t phaseHemisphere = phase >> 24;

	// -1 if transition from upper hemisphere to lower
	// 1 if transition from lower hemisphere to upper
	// 0 otherwise
	int transition = phaseHemisphere - lastPhaseHemisphere;

	// 1 if we are moving backwards through the wavetable (negative multiplier), 0 otherwise
	uint32_t reverse = (uint32_t) ((int) parameters->fm[0]
			* parameters->reverseInput) >> 31;

	uint32_t atA;
	uint32_t atB;
	if (transition > 0) {
		atA = reverse;
		atB = !reverse;
	} else if (transition < 0) {
		atA = !reverse;
		atB = reverse;
	} else if (parameters->shOn == 0) {
		atA = 1;
		atB = 1;
	} else {
		atA = 0;
		atB = 0;
	}

	// BIG NO-NO, no hardware specific code in the library

	// generate square wave at A
	output->logicA = ALOGIC_LOW_MASK << (phaseHemisphere * 16);

	output->shA = SH_A_SAMPLE_MASK >> (atB * 16);
	output->shB = SH_B_SAMPLE_MASK >> (atA * 16);

	lastPhaseHemisphere = phaseHemisphere;

}
